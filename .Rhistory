install.packages('MASS')
install.packages('ISLR')
library(MASS)
library(ISLR)
fix(Boston)
lm.fit <- lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
confint(lm.fit)
predict(lm.fit, data.frame(lstat=(c(5,10,15))), interval='confidence')
predict(lm.fit, data.frame(lstat=(c(5,10,15))), interval='prediction')
plot(lstst, medv)
plot(lstat, medv)
attach(Boston)
plot(lstat, medv)
abline(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
lm.fit <- lm(medv ~ lstat + age, data=Boston)
summary(lm.fit)
lm.fit <- lm(medv~., data=Boston)
summary(lm.fit)
install.packages(vif)
install.packages(car)
install.packages('car')
library(car)
vif(lm.fit)
lm.fit2 <- lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
plot(medv, lstat)
par(mfrow=c(1,1))
plot(medv, lstat)
abline(lm.fit2)
lm.fit <- lm(medv~lstst)
lm.fit <- lm(medv~lstat)
anova(lm.fit, lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
names(Carseats)
lm.fit <- lm(Sales~.+Income:Advertising + Price:Age, data=Carseats)
summary(lm.fit)
str(Auto)
lm.auto <- lm(mpg~horsepower, data=Auto)
summary(lm.auto)
predict(lm.auto, horsepower=c(98))
predict(lm.auto, data.frame(horsepower=c(98))
)
predict(lm.auto, data.frame(horsepower=c(98)), interval='confidence')
predict(lm.auto, data.frame(horsepower=c(98)), interval='prediction')
attach(Auto)
plot(horsepower, mpg)
par(mfrow=c(1,1))
plot(horsepower, mpg)
abline(lm.auto)
abline(lm.auto, col='blue')
par(mfrow=c(2,2))
plot(lm.auto)
pairs(Auto)
?cor
str(Auto)
cor(Auto[1:8,])
cor(Auto[1:8])
lm.auto2 <- lm(mpg~.-name, data=Auto)
summary(lm.auto2)
plot(lm.auto2)
lm.auto3 <- lm(mpg~displacement*weight*year*origin, data=Auto)
summary(lm.auto3)
lm.auto3 <- lm(mpg~ displacement+weight+year+origin+displacement:weight, data=Auto)
summary(lm.auto3)
lm.auto3 <- lm(mpg~ displacement+weight+year+displacement:weight, data=Auto)
summary(lm.auto3)
lm.auto3 <- lm(log(mpg)~ displacement+weight+year+displacement:weight+, data=Auto)
lm.auto3 <- lm(log(mpg)~ displacement+weight+year+displacement:weight, data=Auto)
summary(lm.auto3)
plot(lm.auto3)
plot(predict(lm.auto3), mpg)
plot(exp(predict(lm.auto3)), mpg)
par(mfrow=c(1,1))
plot(exp(predict(lm.auto3)), mpg)
plot(exp(predict(lm.auto2)), mpg)
plot(predict(lm.auto2), mpg)
plot(exp(predict(lm.auto3)), mpg)
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/NFL Standard Score')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/NFL Standard Score')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/NFL Standard Score')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/NFL Standard Score')
?sample
sample(c(1,0), 10, replace = TRUE, prob = c(.61, .39))
sum(sample(c(1,0), 10, replace = TRUE, prob = c(.61, .39)))
sum(sample(c(1,0), 10, replace = TRUE, prob = c(.61, .39)))
sum(sample(c(1,0), 10, replace = TRUE, prob = c(.61, .39)))
sum(sample(c(1,0), 10, replace = TRUE, prob = c(.61, .39)))
sum(sample(c(1,0), 10, replace = TRUE, prob = c(.61, .39)))
sum(sample(c(1,0), 10, replace = TRUE, prob = c(.61, .39)))
sum(sample(c(1,0), 10, replace = TRUE, prob = c(.61, .39)))
sum(sample(c(1,0), 10, replace = TRUE, prob = c(.61, .39)))
results <- list()
for(i in 1:10000) {
results[[i]] <- sum(sample(c(1,0), 10, replace = TRUE, prob = c(.61, .39)))
}
hist(unlist(results))
hist(unlist(results), breaks = 10)
numberTeams <- 10
sample(c(1,0), 3, replace = TRUE, prob = c(3/(numberTeams-1), 6/(numberTeams-1)))
sample(c(1,0), 3, replace = TRUE, prob = c(3/(numberTeams-1), 6/(numberTeams-1)))
sample(c(1,0), 3, replace = TRUE, prob = c(3/(numberTeams-1), 6/(numberTeams-1)))
sample(c(1,0), 3, replace = TRUE, prob = c(3/(numberTeams-1), 6/(numberTeams-1)))
sample(c(1,0), 3, replace = TRUE, prob = c(3/(numberTeams-1), 6/(numberTeams-1)))
rankVector <- c(2, 3, 2, 2, 1, 1, 1, 2, 1, 0)
rankVector[2]
leagueSize <- rankVector
leagueSize <- 10
opponents <- 9
sum(
for(n in 1:leagueSize){
sample(c(1,0), leagueSize[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents))
}
)
sum(
for(n in 1:leagueSize){
sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents))
}
)
sum(
for(n in 1:leagueSize){
sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents))
}
)
sum(
for(n in 1:leagueSize){
sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents))
}
)
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
wins <- 0
for(n in 1:leagueSize){
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c((leagueSize - n)/opponents, (n-1)/opponents)))
}
wins
simulateWins <- function(leagueSize, rankVector){
results <- list()
opponents <- leagueSize-1
for(i in 1:10000) {
wins <- 0
for(n in 1:leagueSize){
winProb <- (leagueSize - n)/opponents
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c(winProb, 1-winProb)))
}
results[[i]] <- wins
}
}
simulateWins(10,rankVector)
?mean
simulateWins <- function(leagueSize, rankVector){
results <- list()
opponents <- leagueSize-1
for(i in 1:10000) {
wins <- 0
for(n in 1:leagueSize){
winProb <- (leagueSize - n)/opponents
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c(winProb, 1-winProb)))
}
results[[i]] <- wins
}
return(results)
}
simulateWins(10,rankVector)
simulateWins <- function(leagueSize, rankVector){
results <- list()
opponents <- leagueSize-1
for(i in 1:10000) {
wins <- 0
for(n in 1:leagueSize){
winProb <- (leagueSize - n)/opponents
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c(winProb, 1-winProb)))
}
results[[i]] <- wins
}
resultFrame <- data.frame(unlist(results))
return(resultFrame)
}
simulateWins(10,rankVector)
sim <- simulateWins(10,rankVector)
summary(sim)
simulateWins <- function(leagueSize, rankVector){
results <- list()
opponents <- leagueSize-1
for(i in 1:10000) {
wins <- 0
for(n in 1:leagueSize){
winProb <- (leagueSize - n)/opponents
wins <- wins + sum(sample(c(1,0), rankVector[n], replace = TRUE, prob = c(winProb, 1-winProb)))
}
results[[i]] <- wins
}
resultFrame <- data.frame(unlist(results))
names(resultFrame) <- c('wins')
return(resultFrame)
}
sim <- simulateWins(10,rankVector)
summary(sim)
plot(sim$wins)
?hist
hist(sim$wins)
library(ggplot2)
qplot(sim$wins, geom="histogram")
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
?min
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
?round
?percent
?round
?percent
?round
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
?percent
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
?geom_text
?geom_fill
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
?factor
?levels
?rep
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
simulateWins <- function(leagueSize, rankVector){
results <- list()
opponents <- leagueSize-1
for(i in 1:10000) {
wins <- 0
for(n in 1:length(rankVector)){
if (rankVector[n] != 0) {
winProb <- (leagueSize - rankVector[n])/opponents
wins <- wins + sum(sample(c(1,0), 1, replace = TRUE, prob = c(winProb, 1-winProb)))
}
}
results[[i]] <- wins
}
resultFrame <- data.frame(unlist(results))
names(resultFrame) <- c('wins')
return(resultFrame)
}
testRankVector <- (1,2,3,4,5,6,2,1,4,8,6,7,8)
testFrame <- simulateWins(10, testRankVector)
simulateWins <- function(leagueSize, rankVector){
results <- list()
opponents <- leagueSize-1
for(i in 1:10000) {
wins <- 0
for(n in 1:length(rankVector)){
if (rankVector[n] != 0) {
winProb <- (leagueSize - rankVector[n])/opponents
wins <- wins + sum(sample(c(1,0), 1, replace = TRUE, prob = c(winProb, 1-winProb)))
}
}
results[[i]] <- wins
}
resultFrame <- data.frame(unlist(results))
names(resultFrame) <- c('wins')
return(resultFrame)
}
testRankVector <- c(1,2,3,4,5,6,2,1,4,8,6,7,8)
testFrame <- simulateWins(10, testRankVector)
summary(testFrame)
?aggregate
aggregate(testFrame, by = testFrame$wins, count)
aggregate(testFrame, by = testFrame$wins, FUN = count)
?count
count(testFrame, vars = 'wins')
aggregate(testFrame, by = testFrame$wins, FUN = NROW)
aggregate(testFrame, by = list(testFrame$wins), FUN = NROW)
names(testFrame) <- c('winTotal', 'occurences')
?as.text
?as.chr
?as.character
aggFrame <- aggregate(testFrame, by = list(testFrame$wins), FUN = NROW)
names(aggFrame) <- c('winTotal', 'occurences')
aggFrame$frequency <- paste0(as.character(aggFrame$occurences/100), '%')
aggFrame
aggFrame[1:3,]
aggFrame[,1:3]
rownames(aggFrame) <- NULL
aggFrame
print(aggFrame, row.names = FALSE)
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
shiny::runApp('C:/Users/brent.lockee/Desktop/Data Science Demo/Bad Luck FF')
50 + 20*4 + .07*110 + 35 + .01*4*110 + -10*4
fix(Auto)
auto <- read.csv("Auto.csv", na.strings = "?")
setwd("C:/Users/brent.lockee/Desktop/ISLR")
auto <- read.csv("Auto.csv", na.strings = "?")
auto.lm <- lm(mpg~horsepower, data=auto)
summary(auto.lm)
prediction.auto <- predict(auto.lm, interval="confidence")
prediction.auto
prediction.auto <- predict(auto.lm, data=data.frame(horsepower = c(98)), interval="confidence")
prediction.auto <- predict(auto.lm, data=data.frame(horsepower = c(98)), interval="confidence")
View(prediction.auto)
prediction.autoTest <- predict(auto.lm, data=data.frame(horsepower = c(98)), interval="confidence")
?predict
prediction.auto <- predict(auto.lm, newdata = data.frame(horsepower = c(98)), interval="confidence")
prediction.auto
prediction.auto <- predict(auto.lm, newdata = data.frame(horsepower = c(98)), interval="prediction")
prediction.auto
plot(auto.lm)
par(mfrow(c(2,2)))
par(mfrow = c(2,2)))
par(mfrow = c(2,2))
plot(auto.lm)
View(auto)
View(auto)
View(auto)
?row.names
row.names(auto) <- auto$name
pairs(auto[,1:8])
cor(auto[,1:8])
auto$horsepower <- as.numeric(auto$horsepower)
cor(auto[,1:8])
str(auto)
?complet.cases
?complete.cases
auto <- auto[complete.cases(auto),]
cor(auto[,1:8])
auto.lm <- lm(mpg~.-name, data=auto)
summary(auto.lm)
auto$origin <- as.factor(auto$origin)
auto.lm <- lm(mpg~.-name, data=auto)
summary(auto.lm)
plot(auto.lm)
auto.lm2 <- lm(mpg~origin*year*weight*displacement, data = auto)
summary(auto.lm2)
auto.lm3 <- lm(mpg~origin*year*displacement+weight, data = auto)
summary(auto.lm3)
auto.lm3 <- lm(mpg~origin+year+displacement+weight+origin:year+year:weight+origin:displacement+origin:year:displacement, data = auto)
summary(auto.lm3)
auto.lm4 <- lm(mpg~.-name+I(weight^2), data = auto)
summary(auto.lm4)
auto.lm <- lm(mpg~.-name, data=auto)
summary(auto.lm)
auto.lm4 <- lm(mpg~.-name-acceleration-horsepower+I(weight^2)+I(acceleration^2), data = auto)
summary(auto.lm4)
auto.lm4 <- lm(mpg~.-name-acceleration-horsepower-cylinders+I(weight^2)+I(acceleration^2), data = auto)
summary(auto.lm4)
plot(auto.lm4)
